/* This file is part of Mini-Gnutella.
 * Copyright (C) 2010  Michele Comignano
 *
 * Foobar is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Foobar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */

package it.unipi.di.cli.comignan.lpr08.ui;

import it.unipi.di.cli.comignan.lpr08.bootstrap.BootstrapServer;
import it.unipi.di.cli.comignan.lpr08.common.ServentDescriptor;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 * L'interfaccia grafica per la gestione di un bootstrap server.
 * @author Michele Comignano
 */
public class BootstrapServerGui extends JFrame {
  /**
   * Serial version UID.
   */
  private static final long serialVersionUID = 1L;
  /**
   * Il registry RMI su cui registrare il bootstrap server.
   */
  private Registry registry;
  /**
   * L'intervallo di aggiornamento delle liste di servents.
   */
  private static final int SERVENTS_LIST_UPDATE_INTERVAL = 2000;
  /**
   * Questo è il timer che una volta inizializzato scandisce gli aggiornamenti delle
   * liste di servents.
   */
  private Timer listTimer;
  /**
   * Il bootstrap server che viene gestito dall'interfaccia.
   */
  private BootstrapServer bootstrapServer;
  /**
   * Permette al timer di accedere alla funzionalità di aggiornamento dell'elenco dei
   * servents affidabili.
   */
  private ActionListener serventsListUpdater = new ActionListener() {
    private DefaultTableModel model;
    @Override
    public void actionPerformed(ActionEvent evt) {
      model = (DefaultTableModel) reliableServentsList.getModel();
      Iterator iter = bootstrapServer.getReliableServents();
      model.setRowCount(0);
      while (iter.hasNext()) {
        ServentDescriptor elem = (ServentDescriptor) iter.next();
        Object[] rowElements = new Object[4];
        rowElements[0] = elem.getInetAddress().getHostAddress();
        rowElements[1] = Integer.toString(elem.getConnectPort());
        rowElements[2] = elem.getLastSeen().toString();
        rowElements[3] = "N\\A";
        model.addRow(rowElements);
      }
    }
  };
  /**
   * Creates new form BootstrapServerGUI
   */
  public BootstrapServerGui() {
    initComponents();
    listTimer = new Timer(SERVENTS_LIST_UPDATE_INTERVAL, serventsListUpdater);
    logArea.appendMessage("Programma avviato");
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        logPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        logArea = new it.unipi.di.cli.comignan.lpr08.ui.LogArea();
        optionsPanel = new javax.swing.JPanel();
        registerCheckBox = new javax.swing.JCheckBox();
        bootstrapServicePortLabel = new javax.swing.JLabel();
        bootstrapServicePortTextField = new javax.swing.JTextField();
        rmiOptionsPanel = new javax.swing.JPanel();
        startRegistryCheckBox = new javax.swing.JCheckBox();
        registryHostLabel = new javax.swing.JLabel();
        registryHostTextField = new javax.swing.JTextField();
        registryPortTextField = new javax.swing.JTextField();
        registryPortLabel = new javax.swing.JLabel();
        serviceNameLabel = new javax.swing.JLabel();
        serviceNameTextField = new javax.swing.JTextField();
        servantsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reliableServentsList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini-Gnutella bootstrap server");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        startButton.setText("Avvia"); // NOI18N
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(startButton);

        stopButton.setText("Ferma"); // NOI18N
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(stopButton);

        exitButton.setText("Esci"); // NOI18N
        exitButton.setFocusable(false);
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exitButton);

        statusLabel.setText("Fermo");
        jToolBar1.add(statusLabel);

        logArea.setColumns(20);
        logArea.setRows(5);
        logArea.setText("    Mini-Gnutella  Copyright (C) 2010  Michele Comignano\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions.\n\nMini-Gnutella Bootstrap server GUI, salve!\nProgetto di Laboratorio Programmazione di Rete 2007/2008\nsviluppato da Michele Comignano <comick@autistici.org>\n\n");
        jScrollPane4.setViewportView(logArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
        );

        tabbedPanel.addTab("Registro", logPanel);

        registerCheckBox.setSelected(true);
        registerCheckBox.setText("Registra il servizio di bootstrap presso un registry rmi"); // NOI18N
        registerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerCheckBoxActionPerformed(evt);
            }
        });

        bootstrapServicePortLabel.setText("Porta di ascolto:");

        bootstrapServicePortTextField.setText("6666");

        startRegistryCheckBox.setText("Avvia un registry RMI locale"); // NOI18N
        startRegistryCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startRegistryCheckBoxActionPerformed(evt);
            }
        });

        registryHostLabel.setText("IP o nome host del registry rmi:");

        registryHostTextField.setText("localhost");
        registryHostTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registryHostTextFieldActionPerformed(evt);
            }
        });

        registryPortTextField.setText("1099");

        registryPortLabel.setText("Porta del registry rmi:");

        serviceNameLabel.setText("Nome del servizio remoto:");

        serviceNameTextField.setText("bs");

        javax.swing.GroupLayout rmiOptionsPanelLayout = new javax.swing.GroupLayout(rmiOptionsPanel);
        rmiOptionsPanel.setLayout(rmiOptionsPanelLayout);
        rmiOptionsPanelLayout.setHorizontalGroup(
            rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rmiOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startRegistryCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addGroup(rmiOptionsPanelLayout.createSequentialGroup()
                        .addGroup(rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registryPortLabel)
                            .addComponent(serviceNameLabel)
                            .addComponent(registryHostLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registryHostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(registryPortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(serviceNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))))
                .addContainerGap())
        );

        rmiOptionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {registryHostLabel, registryPortLabel, serviceNameLabel});

        rmiOptionsPanelLayout.setVerticalGroup(
            rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rmiOptionsPanelLayout.createSequentialGroup()
                .addComponent(startRegistryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registryHostLabel)
                    .addComponent(registryHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registryPortLabel)
                    .addComponent(registryPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rmiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceNameLabel)
                    .addComponent(serviceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rmiOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bootstrapServicePortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bootstrapServicePortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rmiOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bootstrapServicePortLabel)
                    .addComponent(bootstrapServicePortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Opzioni", optionsPanel);

        servantsPanel.setEnabled(false);

        jLabel1.setText("Servents affidabili conosciuti:"); // NOI18N
        jLabel1.setEnabled(false);

        reliableServentsList.setAutoCreateRowSorter(true);
        reliableServentsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Indirizzo IP", "Porta", "Ultima verifica", "Uptime"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reliableServentsList.setEnabled(false);
        jScrollPane1.setViewportView(reliableServentsList);

        javax.swing.GroupLayout servantsPanelLayout = new javax.swing.GroupLayout(servantsPanel);
        servantsPanel.setLayout(servantsPanelLayout);
        servantsPanelLayout.setHorizontalGroup(
            servantsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servantsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(servantsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        servantsPanelLayout.setVerticalGroup(
            servantsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servantsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPanel.addTab("Gestione servents", servantsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
            .addComponent(tabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
      int servicePort = new Integer(bootstrapServicePortTextField.getText()).intValue();
      int registryPort = new Integer(registryPortTextField.getText()).intValue();
      bootstrapServer = new BootstrapServer(servicePort, logArea);
      bootstrapServer.start();
      while (!bootstrapServer.getInitDone()) {
      }
      if (!bootstrapServer.isRunning()) {
        logArea.appendError("Problemi a far partire il bootstrap server");
        return;
      }
      if (registerCheckBox.isSelected()) {
        if (startRegistryCheckBox.isSelected())
          try {
            registry = LocateRegistry.createRegistry(registryPort);
            logArea.appendMessage("Registry RMI locale avviato e pronto all'uso");
          } catch (RemoteException e) {
            logArea.appendError("Non è stato possibile avviare un registry RMI locale", e);
            bootstrapServer.shutdown();
            return;
          }
        else
          try {
            registry = LocateRegistry.getRegistry(registryHostTextField.getText(),
                    registryPort);
          } catch (RemoteException e) {
            logArea.appendError("Impossibile reperire il registry RMI specificato", e);
            bootstrapServer.shutdown();
            return;
          }
        try {
          registry.rebind(serviceNameTextField.getText(), bootstrapServer.getRemote());
        } catch (RemoteException e) {
          logArea.appendError("Impossibile registrare il server di " +
                  "bootstrap presso il registry RMI specificato", e);
          bootstrapServer.shutdown();
          return;
        }
      }
      Component[] components = optionsPanel.getComponents();
      registerCheckBox.setSelected(false);
      registerCheckBoxActionPerformed(evt);
      for (int i = 0; i < components.length; i++)
        components[i].setEnabled(false);
      components = servantsPanel.getComponents();
      for (int i = 0; i < components.length; i++)
        components[i].setEnabled(true);
      listTimer.start();
      stopButton.setEnabled(true);
      startButton.setEnabled(false);
      statusLabel.setText("In esecuzione");
      logArea.appendMessage("Server di bootstrap avviato con successo");
}//GEN-LAST:event_startButtonActionPerformed
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
      listTimer.stop();
      bootstrapServer.shutdown();
      Component[] components = optionsPanel.getComponents();
      for (int i = 0; i < components.length; i++)
        components[i].setEnabled(true);
      startRegistryCheckBoxActionPerformed(evt);
      registerCheckBoxActionPerformed(evt);
      components = servantsPanel.getComponents();
      for (int i = 0; i < components.length; i++)
        components[i].setEnabled(false);
      startButton.setEnabled(true);
      stopButton.setEnabled(false);
      ((DefaultTableModel) reliableServentsList.getModel()).setRowCount(0);
      statusLabel.setText("Fermo");
      logArea.appendMessage("Server di bootstrap terminato con successo");
    }//GEN-LAST:event_stopButtonActionPerformed
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
      if (bootstrapServer != null && bootstrapServer.isRunning())
        stopButtonActionPerformed(evt);
      System.exit(0);
}//GEN-LAST:event_exitButtonActionPerformed
    private void registerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerCheckBoxActionPerformed
      Component[] components = rmiOptionsPanel.getComponents();
      for (int i = 0; i < components.length; i++)
        components[i].setEnabled(registerCheckBox.isSelected());
      startRegistryCheckBox.setSelected(false);
}//GEN-LAST:event_registerCheckBoxActionPerformed
    private void registryHostTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registryHostTextFieldActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_registryHostTextFieldActionPerformed
    private void startRegistryCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startRegistryCheckBoxActionPerformed
      registryHostTextField.setText("localhost");
      registryHostLabel.setEnabled(!startRegistryCheckBox.isSelected());
      registryHostTextField.setEnabled(!startRegistryCheckBox.isSelected());
}//GEN-LAST:event_startRegistryCheckBoxActionPerformed
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new BootstrapServerGui().setVisible(true);
      }
    });
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bootstrapServicePortLabel;
    private javax.swing.JTextField bootstrapServicePortTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar1;
    private it.unipi.di.cli.comignan.lpr08.ui.LogArea logArea;
    private javax.swing.JPanel logPanel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JCheckBox registerCheckBox;
    private javax.swing.JLabel registryHostLabel;
    private javax.swing.JTextField registryHostTextField;
    private javax.swing.JLabel registryPortLabel;
    private javax.swing.JTextField registryPortTextField;
    private javax.swing.JTable reliableServentsList;
    private javax.swing.JPanel rmiOptionsPanel;
    private javax.swing.JPanel servantsPanel;
    private javax.swing.JLabel serviceNameLabel;
    private javax.swing.JTextField serviceNameTextField;
    private javax.swing.JButton startButton;
    private javax.swing.JCheckBox startRegistryCheckBox;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JTabbedPane tabbedPanel;
    // End of variables declaration//GEN-END:variables
}
