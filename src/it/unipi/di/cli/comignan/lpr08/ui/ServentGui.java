/* This file is part of Mini-Gnutella.
 * Copyright (C) 2010  Michele Comignano
 *
 * Foobar is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Foobar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */

package it.unipi.di.cli.comignan.lpr08.ui;

import it.unipi.di.cli.comignan.lpr08.common.BootstrapServerRemote;
import it.unipi.di.cli.comignan.lpr08.common.ServentGroup;
import it.unipi.di.cli.comignan.lpr08.common.ServentDescriptor;
import it.unipi.di.cli.comignan.lpr08.servent.SearchResult;
import it.unipi.di.cli.comignan.lpr08.servent.SearchResults;
import it.unipi.di.cli.comignan.lpr08.servent.Servent;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.LinkedList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 * Implementazione dell'interfaccia per la gestione di un servent della rete Mini-Gnutella.
 * @author Michele Comignano
 */
public class ServentGui extends JFrame {
  /**
   * Permette al timer di accedere alla funzionalit√† di aggiornamento dell'elenco dei
   * servents affidabili. TODO metterlo nell'interfaccia
   */
  private ActionListener serventsListUpdater = new ActionListener() {
    private DefaultTableModel model;
    @Override
    public void actionPerformed(ActionEvent evt) {
      model = (DefaultTableModel) connectedServentsList.getModel();
      LinkedList<ServentDescriptor> connectedServents = servent.getConnectedServents();
      model.setRowCount(0);
      for (int i = 0; i < connectedServents.size(); i++) {
        ServentDescriptor elem = connectedServents.get(i);
        Object[] rowElements = new Object[4];
        rowElements[0] = elem.getInetAddress().getHostAddress();
        rowElements[1] = Integer.toString(elem.getConnectPort());
        rowElements[2] = "N/A";
        rowElements[3] = "N/A";
        model.addRow(rowElements);
      }
    }
  };
  private ActionListener searchResultsUpdater = new ActionListener() {
    private DefaultTableModel model;
    @Override
    public void actionPerformed(ActionEvent evt) {
      model = (DefaultTableModel) searchResults.getModel();
      model.setRowCount(0);
      SearchResult res;
      Object[] rowElements;
      for (int i = 0; i < results.size(); i++) {
        res = results.get(i);
        rowElements = new Object[4];
        rowElements[0] = res.getFileName();
        rowElements[1] = "N/A";
        rowElements[2] = res.getAddress().getHostAddress() + (!res.isFirewalled() ? ":" + res.
                getFileServerPort() : "");
        rowElements[3] = res.isFirewalled();
        model.addRow(rowElements);
      }
    }
  };
  /** Creates new form ServentGui */
  public ServentGui() {
    System.out.println("almeno qui ci arrivo");
    initComponents();
    connectionsTimer = new Timer(LIST_UPDATE_INTERVAL, serventsListUpdater);
    searchResultsTimer = new Timer(LIST_UPDATE_INTERVAL, searchResultsUpdater);
    logArea.appendMessage("Programma avviato");
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        bootstrapButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        logArea = new it.unipi.di.cli.comignan.lpr08.ui.LogArea();
        jPanel2 = new javax.swing.JPanel();
        serventOptionsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        udpPortSpinner = new javax.swing.JSpinner();
        tcpPortSpinner = new javax.swing.JSpinner();
        httpPortSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        sharedFolderTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        connectionsLimitSpinner = new javax.swing.JSpinner();
        immediateBootstrapCheckBox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        sharedFolderTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        firewalledCheckBox = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        callbackPortLabel = new javax.swing.JLabel();
        callbackPortSpinner = new javax.swing.JSpinner();
        registerCheckBox = new javax.swing.JCheckBox();
        useRegistryCheckBox = new javax.swing.JCheckBox();
        registryOptionsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        registryHostTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        registryPortSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        bootstrapServiceNameTextField = new javax.swing.JTextField();
        bootstrapOptionsPanel = new javax.swing.JPanel();
        bootstrapServerHostTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        bootstrapServerPortSpinner = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        connectedServentsList = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        newConnectPortSpinner = new javax.swing.JSpinner();
        newHostNameTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        searchKeyLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchResults = new javax.swing.JTable();
        downloadButton = new javax.swing.JButton();
        searchKeyTextField = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        refreshFilesListButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini-Gnutella"); // NOI18N

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        startButton.setText("Avvia"); // NOI18N
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        toolBar.add(startButton);

        bootstrapButton.setText("Bootstrap");
        bootstrapButton.setEnabled(false);
        bootstrapButton.setFocusable(false);
        bootstrapButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bootstrapButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bootstrapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootstrapButtonActionPerformed(evt);
            }
        });
        toolBar.add(bootstrapButton);

        stopButton.setText("Arresta"); // NOI18N
        stopButton.setEnabled(false);
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        toolBar.add(stopButton);

        exitButton.setText("Esci"); // NOI18N
        exitButton.setFocusable(false);
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        toolBar.add(exitButton);

        logArea.setColumns(20);
        logArea.setRows(5);
        logArea.setText("    Mini-Gnutella  Copyright (C) 2010  Michele Comignano\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions.\n\nMini-Gnutella Servent GUI, salve!\nProgetto di Laboratorio Programmazione di Rete 2007/2008\nsviluppato da Michele Comignano <comick@autistici.org>\n\n");
        jScrollPane4.setViewportView(logArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Registro", jPanel4);

        jLabel7.setText("Porta TCP per file server:");

        jLabel6.setText("Porta TCP per connessioni:");

        jLabel5.setText("Porta UDP per l'esplorazione:");

        udpPortSpinner.setModel(new javax.swing.SpinnerNumberModel(6346, 1, 65535, 1));

        tcpPortSpinner.setModel(new javax.swing.SpinnerNumberModel(6346, 1, 65535, 1));

        httpPortSpinner.setModel(new javax.swing.SpinnerNumberModel(8089, 1, 65535, 1));

        jLabel4.setText("Cartella files condivisi:");

        jButton2.setText("Sfoglia");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        sharedFolderTextField.setText("/home/michele/shared/");

        jLabel11.setText("Limite massimo connessioni:");

        connectionsLimitSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 1, 1000, 1));

        immediateBootstrapCheckBox.setText("Effettua la fase di bootstrap subito dopo l'avvio");
        immediateBootstrapCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                immediateBootstrapCheckBoxActionPerformed(evt);
            }
        });

        jLabel13.setText("File con la cache servents:");

        jButton5.setText("Sfoglia");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        firewalledCheckBox.setText("Dietro un firewall (le impostazioni delle poerte non avranno effetto)");

        javax.swing.GroupLayout serventOptionsPanelLayout = new javax.swing.GroupLayout(serventOptionsPanel);
        serventOptionsPanel.setLayout(serventOptionsPanelLayout);
        serventOptionsPanelLayout.setHorizontalGroup(
            serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serventOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(immediateBootstrapCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addComponent(firewalledCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addGroup(serventOptionsPanelLayout.createSequentialGroup()
                        .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(httpPortSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                            .addComponent(udpPortSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                            .addComponent(tcpPortSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)))
                    .addGroup(serventOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sharedFolderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(serventOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectionsLimitSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serventOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sharedFolderTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addContainerGap())
        );

        serventOptionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel11, jLabel13, jLabel4, jLabel5, jLabel6, jLabel7});

        serventOptionsPanelLayout.setVerticalGroup(
            serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serventOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(udpPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tcpPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(httpPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton2)
                    .addComponent(sharedFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(connectionsLimitSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serventOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(sharedFolderTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firewalledCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(immediateBootstrapCheckBox)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serventOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serventOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Opzioni", jPanel2);

        callbackPortLabel.setText("Porta per le callback:");
        callbackPortLabel.setEnabled(false);

        callbackPortSpinner.setModel(new javax.swing.SpinnerNumberModel(6347, 1, 65535, 1));
        callbackPortSpinner.setEnabled(false);

        registerCheckBox.setText("Registrati per ricevere informazioni su nuovi servents");
        registerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerCheckBoxActionPerformed(evt);
            }
        });

        useRegistryCheckBox.setSelected(true);
        useRegistryCheckBox.setText("Usa registry RMI per scovare un server di bootstrap");
        useRegistryCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useRegistryCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Host registry RMI:");

        registryHostTextField.setText("localhost");

        jLabel2.setText("Porta registry RMI:");

        registryPortSpinner.setModel(new javax.swing.SpinnerNumberModel(1099, 1, 65535, 1));

        jLabel3.setText("Nome bootstrap server:");

        bootstrapServiceNameTextField.setText("bs");

        javax.swing.GroupLayout registryOptionsPanelLayout = new javax.swing.GroupLayout(registryOptionsPanel);
        registryOptionsPanel.setLayout(registryOptionsPanelLayout);
        registryOptionsPanelLayout.setHorizontalGroup(
            registryOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registryOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registryOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registryOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registryPortSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                    .addGroup(registryOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registryHostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                    .addGroup(registryOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bootstrapServiceNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );

        registryOptionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3});

        registryOptionsPanelLayout.setVerticalGroup(
            registryOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registryOptionsPanelLayout.createSequentialGroup()
                .addGroup(registryOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(registryHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registryOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(registryPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registryOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(bootstrapServiceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        bootstrapServerHostTextField.setText("localhost");
        bootstrapServerHostTextField.setEnabled(false);

        jLabel8.setText("Host bootstrap server:");
        jLabel8.setEnabled(false);

        jLabel9.setText("Porta bootstrap server:");
        jLabel9.setEnabled(false);

        bootstrapServerPortSpinner.setModel(new javax.swing.SpinnerNumberModel(6666, 1, 65535, 1));
        bootstrapServerPortSpinner.setEnabled(false);

        javax.swing.GroupLayout bootstrapOptionsPanelLayout = new javax.swing.GroupLayout(bootstrapOptionsPanel);
        bootstrapOptionsPanel.setLayout(bootstrapOptionsPanelLayout);
        bootstrapOptionsPanelLayout.setHorizontalGroup(
            bootstrapOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bootstrapOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bootstrapOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bootstrapOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bootstrapServerHostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                    .addGroup(bootstrapOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bootstrapServerPortSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)))
                .addContainerGap())
        );

        bootstrapOptionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel8, jLabel9});

        bootstrapOptionsPanelLayout.setVerticalGroup(
            bootstrapOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bootstrapOptionsPanelLayout.createSequentialGroup()
                .addGroup(bootstrapOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bootstrapServerHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bootstrapOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(bootstrapServerPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                .addGap(16, 16, 16))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(callbackPortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(callbackPortSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useRegistryCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(registryOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bootstrapOptionsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(callbackPortLabel)
                    .addComponent(callbackPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useRegistryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registryOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bootstrapOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Bootstrap", jPanel7);

        connectedServentsList.setAutoCreateRowSorter(true);
        connectedServentsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Host", "Porta", "Ultima verifica", "Files condivisi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        connectedServentsList.setEnabled(false);
        jScrollPane1.setViewportView(connectedServentsList);

        jLabel12.setText("Servents connessi:");
        jLabel12.setEnabled(false);

        jButton1.setText("Connetti");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        newConnectPortSpinner.setModel(new javax.swing.SpinnerNumberModel(6346, 1, 65535, 1));
        newConnectPortSpinner.setEnabled(false);

        newHostNameTextField.setEnabled(false);

        jLabel10.setText("Porta:");
        jLabel10.setEnabled(false);

        jLabel14.setText("Nome host o IP:");
        jLabel14.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addComponent(jLabel12)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newHostNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newConnectPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(newConnectPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newHostNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel14))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Connessioni", jPanel1);

        searchKeyLabel.setText("Parole chiave:");
        searchKeyLabel.setEnabled(false);

        searchButton.setText("Cerca");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome file", "Dimensione", "Proprietario", "Firewalled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResults.setEnabled(false);
        searchResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        searchResults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchResultsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(searchResults);

        downloadButton.setText("Scarica");
        downloadButton.setEnabled(false);
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        searchKeyTextField.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(searchKeyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addComponent(downloadButton))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton))
                    .addComponent(searchKeyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cerca", jPanel3);

        refreshFilesListButton.setText("Aggiorna");
        refreshFilesListButton.setEnabled(false);
        refreshFilesListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshFilesListButtonActionPerformed(evt);
            }
        });

        fileList.setEnabled(false);
        jScrollPane2.setViewportView(fileList);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshFilesListButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshFilesListButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("File condivisi", jPanel8);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
      if (servent != null && servent.isRunning()) {
        stopButtonActionPerformed(evt);
      }
      System.exit(0);
}//GEN-LAST:event_exitButtonActionPerformed
  private BootstrapServerRemote getBootstrapServerRemote() {
    BootstrapServerRemote bs = null;
    if (useRegistryCheckBox.isSelected()) {
      try {
        Registry registry = LocateRegistry.getRegistry(registryHostTextField.getText(),
                ((Integer) registryPortSpinner.getValue()).intValue());
        bs = (BootstrapServerRemote) registry.lookup(bootstrapServiceNameTextField.getText());
      } catch (RemoteException e) {
        logArea.appendError("Non sono riuscito a contattare il registry RMI", e);
      } catch (NotBoundException e) {
        logArea.appendError("Nessun server di bootstrap presente nel registry RMI col nome \"" +
                bootstrapServiceNameTextField.getText() + "\"");
      }
    } else {
      // TODO qui collegarsi in qualche modo al bootstrap server senza registry
    }
    return bs;
  }
  private void switchViewToStopped(boolean stopped) {
    Component[] options = serventOptionsPanel.getComponents();
    for (int i = 0; i < options.length; i++) {
      options[i].setEnabled(stopped);
    }
    options = jPanel1.getComponents();
    for (int i = 0; i < options.length; i++) {
      options[i].setEnabled(!stopped);
    }
    searchButton.setEnabled(!stopped);
    searchKeyLabel.setEnabled(!stopped);
    searchKeyTextField.setEnabled(!stopped);
    bootstrapButton.setEnabled(!stopped);
    startButton.setEnabled(stopped);
    stopButton.setEnabled(!stopped);
    fileList.setEnabled(!stopped);
    refreshFilesListButton.setEnabled(!stopped);
  }
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
      int udpPort = ((Integer) udpPortSpinner.getValue()).intValue();
      int tcpPort = ((Integer) tcpPortSpinner.getValue()).intValue();
      int fileServerPort = ((Integer) httpPortSpinner.getValue()).intValue();
      try {
        servent = new Servent(new ServentGroup(), udpPort, tcpPort,
                fileServerPort, sharedFolderTextField.getText(),
                ((Integer) connectionsLimitSpinner.getValue()).intValue(), logArea,
                firewalledCheckBox.isSelected());
      } catch (IllegalArgumentException e) {
        logArea.appendError("Creazione servent fallita, controlla le opzioni", e);
        return;
      }
      servent.start();
      while (!servent.isInitDone()) {
      }
      if (!servent.isRunning()) {
        return;
      }
      if (immediateBootstrapCheckBox.isSelected()) {
        doBootstrap();
      }
      switchViewToStopped(false);
      refreshFilesListButtonActionPerformed(evt);
      connectionsTimer.start();
}//GEN-LAST:event_startButtonActionPerformed
private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
  servent.shutdown();
  servent.interrupt();
  try {
    servent.join();
  } catch (InterruptedException e) {
  }
  logArea.appendMessage("Servent terminato con successo");
  connectionsTimer.stop();
  ((DefaultTableModel) connectedServentsList.getModel()).setRowCount(0);
  ((DefaultListModel) fileList.getModel()).removeAllElements();
  switchViewToStopped(true);
}//GEN-LAST:event_stopButtonActionPerformed
  private boolean doBootstrap() {
    BootstrapServerRemote bs = getBootstrapServerRemote();
    if (bs == null) {
      return false;
    }
    try {
      servent.bootstrap(bs);
      if (registerCheckBox.isSelected()) {
        servent.subscribe(bs, ((Integer) callbackPortSpinner.getValue()).intValue());
      }
    } catch (RemoteException e) {
      logArea.appendError("Si sono verificati problemi di dialogo col server di bootstrap", e);
      return false;
    }
    return true;
  }
private void useRegistryCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useRegistryCheckBoxActionPerformed
  Component[] registryOptionsComponents = registryOptionsPanel.getComponents();
  Component[] bootstrapOptionsComponents = bootstrapOptionsPanel.getComponents();
  for (int i = 0; i < registryOptionsComponents.length; i++) {
    registryOptionsComponents[i].setEnabled(useRegistryCheckBox.isSelected());
  }
  for (int i = 0; i < bootstrapOptionsComponents.length; i++) {
    bootstrapOptionsComponents[i].setEnabled(!useRegistryCheckBox.isSelected());
  }
}//GEN-LAST:event_useRegistryCheckBoxActionPerformed
private void bootstrapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bootstrapButtonActionPerformed
  doBootstrap();
}//GEN-LAST:event_bootstrapButtonActionPerformed
private void registerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerCheckBoxActionPerformed
  callbackPortLabel.setEnabled(registerCheckBox.isSelected());
  callbackPortSpinner.setEnabled(registerCheckBox.isSelected());
}//GEN-LAST:event_registerCheckBoxActionPerformed
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
  final JFileChooser fc = new JFileChooser();
  if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    sharedFolderTextField.setText(fc.getSelectedFile().getPath());
  }
}//GEN-LAST:event_jButton2ActionPerformed
private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
  // TODO add your handling code here:
}//GEN-LAST:event_jButton5ActionPerformed
private void immediateBootstrapCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_immediateBootstrapCheckBoxActionPerformed
  // TODO add your handling code here:
}//GEN-LAST:event_immediateBootstrapCheckBoxActionPerformed
private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
  if (searchKeyLabel.isEnabled()) {
    if (searchKeyTextField.getText().length() > 0) {
      results = servent.search(searchKeyTextField.getText());
      searchButton.setText("Interrompi");
      searchResults.setEnabled(false);
      searchResultsTimer.start();
      downloadButton.setEnabled(false);
      searchKeyLabel.setEnabled(false);
      searchKeyTextField.setEnabled(false);
    }
  } else {
    searchResultsTimer.stop();
    searchResults.setEnabled(true);
    servent.stopSearch(results);
    searchButton.setText("Cerca");
    searchKeyLabel.setEnabled(true);
    searchKeyTextField.setEnabled(true);
  }
}//GEN-LAST:event_searchButtonActionPerformed
private void refreshFilesListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFilesListButtonActionPerformed
  Vector<String> sharedFilesNames = servent.getSharedFilesNames();
  DefaultListModel model = new DefaultListModel();
  fileList.setModel(model);
  for (int i = 0; i < sharedFilesNames.size(); i++) {
    model.add(i, sharedFilesNames.get(i));
  }
}//GEN-LAST:event_refreshFilesListButtonActionPerformed
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
  int port = ((Integer) (newConnectPortSpinner.getValue())).intValue();
  servent.connect(newHostNameTextField.getText(), port);
  newHostNameTextField.setText("");
}//GEN-LAST:event_jButton1ActionPerformed
private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
  SearchResult res = results.get(searchResults.getSelectedRow());
  servent.download(res);
}//GEN-LAST:event_downloadButtonActionPerformed
private void searchResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultsMouseClicked
  downloadButton.setEnabled(searchResults.getSelectedRow() >= 0);
}//GEN-LAST:event_searchResultsMouseClicked
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new ServentGui().setVisible(true);
      }
    });
  }
  /**
   * Il servent gestito dall'interfaccia.
   */
  private Servent servent;
  private SearchResults results;
  /**
   * Serial Version UID
   */
  public static final long serialVersionUID = 1L;
  /**
   * Questo √® il timer che una volta inizializzato scandisce gli
   * aggiornamenti della lista di connessioni.
   */
  private Timer connectionsTimer,  searchResultsTimer;
  private static final int LIST_UPDATE_INTERVAL = 2000;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bootstrapButton;
    private javax.swing.JPanel bootstrapOptionsPanel;
    private javax.swing.JTextField bootstrapServerHostTextField;
    private javax.swing.JSpinner bootstrapServerPortSpinner;
    private javax.swing.JTextField bootstrapServiceNameTextField;
    private javax.swing.JLabel callbackPortLabel;
    private javax.swing.JSpinner callbackPortSpinner;
    private javax.swing.JTable connectedServentsList;
    private javax.swing.JSpinner connectionsLimitSpinner;
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JList fileList;
    private javax.swing.JCheckBox firewalledCheckBox;
    private javax.swing.JSpinner httpPortSpinner;
    private javax.swing.JCheckBox immediateBootstrapCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private it.unipi.di.cli.comignan.lpr08.ui.LogArea logArea;
    private javax.swing.JSpinner newConnectPortSpinner;
    private javax.swing.JTextField newHostNameTextField;
    private javax.swing.JButton refreshFilesListButton;
    private javax.swing.JCheckBox registerCheckBox;
    private javax.swing.JTextField registryHostTextField;
    private javax.swing.JPanel registryOptionsPanel;
    private javax.swing.JSpinner registryPortSpinner;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchKeyLabel;
    private javax.swing.JTextField searchKeyTextField;
    private javax.swing.JTable searchResults;
    private javax.swing.JPanel serventOptionsPanel;
    private javax.swing.JTextField sharedFolderTextField;
    private javax.swing.JTextField sharedFolderTextField1;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JSpinner tcpPortSpinner;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JSpinner udpPortSpinner;
    private javax.swing.JCheckBox useRegistryCheckBox;
    // End of variables declaration//GEN-END:variables
}

